// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.0
// source: client_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	//Sends a command information 发送命令信息
	Cmd(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	//服务器流
	StreamServer(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Server_StreamServerClient, error)
	//客户端流
	StreamClient(ctx context.Context, opts ...grpc.CallOption) (Server_StreamClientClient, error)
	//双向流
	StreamTwo(ctx context.Context, opts ...grpc.CallOption) (Server_StreamTwoClient, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Cmd(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/grpc.Server/cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StreamServer(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Server_StreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], "/grpc.Server/StreamServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_StreamServerClient interface {
	Recv() (*StreamRes, error)
	grpc.ClientStream
}

type serverStreamServerClient struct {
	grpc.ClientStream
}

func (x *serverStreamServerClient) Recv() (*StreamRes, error) {
	m := new(StreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) StreamClient(ctx context.Context, opts ...grpc.CallOption) (Server_StreamClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], "/grpc.Server/StreamClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamClientClient{stream}
	return x, nil
}

type Server_StreamClientClient interface {
	Send(*StreamReq) error
	CloseAndRecv() (*StreamRes, error)
	grpc.ClientStream
}

type serverStreamClientClient struct {
	grpc.ClientStream
}

func (x *serverStreamClientClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverStreamClientClient) CloseAndRecv() (*StreamRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) StreamTwo(ctx context.Context, opts ...grpc.CallOption) (Server_StreamTwoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[2], "/grpc.Server/StreamTwo", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamTwoClient{stream}
	return x, nil
}

type Server_StreamTwoClient interface {
	Send(*StreamReq) error
	Recv() (*StreamRes, error)
	grpc.ClientStream
}

type serverStreamTwoClient struct {
	grpc.ClientStream
}

func (x *serverStreamTwoClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverStreamTwoClient) Recv() (*StreamRes, error) {
	m := new(StreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	//Sends a command information 发送命令信息
	Cmd(context.Context, *CommandRequest) (*CommandReply, error)
	//服务器流
	StreamServer(*StreamReq, Server_StreamServerServer) error
	//客户端流
	StreamClient(Server_StreamClientServer) error
	//双向流
	StreamTwo(Server_StreamTwoServer) error
	MustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Cmd(context.Context, *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (UnimplementedServerServer) StreamServer(*StreamReq, Server_StreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServer not implemented")
}
func (UnimplementedServerServer) StreamClient(Server_StreamClientServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamClient not implemented")
}
func (UnimplementedServerServer) StreamTwo(Server_StreamTwoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTwo not implemented")
}
func (UnimplementedServerServer) MustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	MustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Server/cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Cmd(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_StreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).StreamServer(m, &serverStreamServerServer{stream})
}

type Server_StreamServerServer interface {
	Send(*StreamRes) error
	grpc.ServerStream
}

type serverStreamServerServer struct {
	grpc.ServerStream
}

func (x *serverStreamServerServer) Send(m *StreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Server_StreamClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).StreamClient(&serverStreamClientServer{stream})
}

type Server_StreamClientServer interface {
	SendAndClose(*StreamRes) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type serverStreamClientServer struct {
	grpc.ServerStream
}

func (x *serverStreamClientServer) SendAndClose(m *StreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverStreamClientServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Server_StreamTwo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).StreamTwo(&serverStreamTwoServer{stream})
}

type Server_StreamTwoServer interface {
	Send(*StreamRes) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type serverStreamTwoServer struct {
	grpc.ServerStream
}

func (x *serverStreamTwoServer) Send(m *StreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverStreamTwoServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cmd",
			Handler:    _Server_Cmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServer",
			Handler:       _Server_StreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamClient",
			Handler:       _Server_StreamClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTwo",
			Handler:       _Server_StreamTwo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client_service.proto",
}
