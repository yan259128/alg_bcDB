// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: server.proto

package blockchain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数据 交易
type DataTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID   []byte `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`     //交易的id
	DataID []byte `protobuf:"bytes,2,opt,name=DataID,proto3" json:"DataID,omitempty"` // 数据的唯一标识
	// 数据信息
	Table     string `protobuf:"bytes,3,opt,name=Table,proto3" json:"Table,omitempty"`
	Key       string `protobuf:"bytes,4,opt,name=Key,proto3" json:"Key,omitempty"`
	Value     string `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`
	Possessor string `protobuf:"bytes,6,opt,name=Possessor,proto3" json:"Possessor,omitempty"` // 交易所属者
	TimeStamp int64  `protobuf:"varint,7,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	// 验证信息
	PublicKey []byte `protobuf:"bytes,8,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"` // 公钥
	Signature []byte `protobuf:"bytes,9,opt,name=Signature,proto3" json:"Signature,omitempty"` // 签名
}

func (x *DataTransaction) Reset() {
	*x = DataTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransaction) ProtoMessage() {}

func (x *DataTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransaction.ProtoReflect.Descriptor instead.
func (*DataTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *DataTransaction) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *DataTransaction) GetDataID() []byte {
	if x != nil {
		return x.DataID
	}
	return nil
}

func (x *DataTransaction) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DataTransaction) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DataTransaction) GetPossessor() string {
	if x != nil {
		return x.Possessor
	}
	return ""
}

func (x *DataTransaction) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *DataTransaction) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *DataTransaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// 表 (交易)
type TableTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID             []byte   `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	Table            string   `protobuf:"bytes,2,opt,name=Table,proto3" json:"Table,omitempty"`                       //表名
	PermissionTables []string `protobuf:"bytes,3,rep,name=PermissionTables,proto3" json:"PermissionTables,omitempty"` // 表的权限(为用户地址加权限)
	Possessor        string   `protobuf:"bytes,4,opt,name=Possessor,proto3" json:"Possessor,omitempty"`
	TimeStamp        int64    `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	// 验证信息
	PublicKey []byte `protobuf:"bytes,6,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Signature []byte `protobuf:"bytes,7,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *TableTransaction) Reset() {
	*x = TableTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTransaction) ProtoMessage() {}

func (x *TableTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTransaction.ProtoReflect.Descriptor instead.
func (*TableTransaction) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *TableTransaction) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TableTransaction) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TableTransaction) GetPermissionTables() []string {
	if x != nil {
		return x.PermissionTables
	}
	return nil
}

func (x *TableTransaction) GetPossessor() string {
	if x != nil {
		return x.Possessor
	}
	return ""
}

func (x *TableTransaction) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *TableTransaction) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *TableTransaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// 数据交易
type DataTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*DataTransaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"` // 多个交易
}

func (x *DataTransactions) Reset() {
	*x = DataTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransactions) ProtoMessage() {}

func (x *DataTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransactions.ProtoReflect.Descriptor instead.
func (*DataTransactions) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *DataTransactions) GetTransactions() []*DataTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 表交易
type TableTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TableTransaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"` // 多个交易
}

func (x *TableTransactions) Reset() {
	*x = TableTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTransactions) ProtoMessage() {}

func (x *TableTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTransactions.ProtoReflect.Descriptor instead.
func (*TableTransactions) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *TableTransactions) GetTransactions() []*TableTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 数据区块
type DataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                              //区块的ID
	CurrentBlockHash  []byte             `protobuf:"bytes,2,opt,name=CurrentBlockHash,proto3" json:"CurrentBlockHash,omitempty"`   //当前区块的 HASH
	PreviousBlockHash []byte             `protobuf:"bytes,3,opt,name=PreviousBlockHash,proto3" json:"PreviousBlockHash,omitempty"` //上一个区块的 HASH
	MerKelRoot        []byte             `protobuf:"bytes,4,opt,name=MerKelRoot,proto3" json:"MerKelRoot,omitempty"`               //MerKelRoot MerKelRoot
	TxInfo            []*DataTransaction `protobuf:"bytes,5,rep,name=TxInfo,proto3" json:"TxInfo,omitempty"`                       //区块的所有交易
	TimeTamp          uint64             `protobuf:"varint,6,opt,name=TimeTamp,proto3" json:"TimeTamp,omitempty"`                  //时间戳
}

func (x *DataBlock) Reset() {
	*x = DataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlock) ProtoMessage() {}

func (x *DataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlock.ProtoReflect.Descriptor instead.
func (*DataBlock) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *DataBlock) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DataBlock) GetCurrentBlockHash() []byte {
	if x != nil {
		return x.CurrentBlockHash
	}
	return nil
}

func (x *DataBlock) GetPreviousBlockHash() []byte {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *DataBlock) GetMerKelRoot() []byte {
	if x != nil {
		return x.MerKelRoot
	}
	return nil
}

func (x *DataBlock) GetTxInfo() []*DataTransaction {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *DataBlock) GetTimeTamp() uint64 {
	if x != nil {
		return x.TimeTamp
	}
	return 0
}

// 表区块
type TableBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                              //区块的ID
	CurrentBlockHash  []byte              `protobuf:"bytes,2,opt,name=CurrentBlockHash,proto3" json:"CurrentBlockHash,omitempty"`   //当前区块的 HASH
	PreviousBlockHash []byte              `protobuf:"bytes,3,opt,name=PreviousBlockHash,proto3" json:"PreviousBlockHash,omitempty"` //上一个区块的 HASH
	MerKelRoot        []byte              `protobuf:"bytes,4,opt,name=MerKelRoot,proto3" json:"MerKelRoot,omitempty"`               //MerKelRoot MerKelRoot
	TxInfo            []*TableTransaction `protobuf:"bytes,5,rep,name=TxInfo,proto3" json:"TxInfo,omitempty"`                       //区块的所有交易
	TimeTamp          uint64              `protobuf:"varint,6,opt,name=TimeTamp,proto3" json:"TimeTamp,omitempty"`                  //时间戳
}

func (x *TableBlock) Reset() {
	*x = TableBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableBlock) ProtoMessage() {}

func (x *TableBlock) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableBlock.ProtoReflect.Descriptor instead.
func (*TableBlock) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *TableBlock) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TableBlock) GetCurrentBlockHash() []byte {
	if x != nil {
		return x.CurrentBlockHash
	}
	return nil
}

func (x *TableBlock) GetPreviousBlockHash() []byte {
	if x != nil {
		return x.PreviousBlockHash
	}
	return nil
}

func (x *TableBlock) GetMerKelRoot() []byte {
	if x != nil {
		return x.MerKelRoot
	}
	return nil
}

func (x *TableBlock) GetTxInfo() []*TableTransaction {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *TableBlock) GetTimeTamp() uint64 {
	if x != nil {
		return x.TimeTamp
	}
	return 0
}

type ReqDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`        // 本地最新区块的哈希
	BlockID int64  `protobuf:"varint,2,opt,name=BlockID,proto3" json:"BlockID,omitempty"` // 最新区块序号
}

func (x *ReqDataBlock) Reset() {
	*x = ReqDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDataBlock) ProtoMessage() {}

func (x *ReqDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDataBlock.ProtoReflect.Descriptor instead.
func (*ReqDataBlock) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *ReqDataBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqDataBlock) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

type ResDataBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*DataBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"` // 同步过来的区块
}

func (x *ResDataBlocks) Reset() {
	*x = ResDataBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResDataBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResDataBlocks) ProtoMessage() {}

func (x *ResDataBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResDataBlocks.ProtoReflect.Descriptor instead.
func (*ResDataBlocks) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *ResDataBlocks) GetBlocks() []*DataBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ReqTableBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`        // 本地最新区块的哈希
	BlockID int64  `protobuf:"varint,2,opt,name=BlockID,proto3" json:"BlockID,omitempty"` // 最新区块序号
}

func (x *ReqTableBlock) Reset() {
	*x = ReqTableBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTableBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTableBlock) ProtoMessage() {}

func (x *ReqTableBlock) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTableBlock.ProtoReflect.Descriptor instead.
func (*ReqTableBlock) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *ReqTableBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ReqTableBlock) GetBlockID() int64 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

type ResTableBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*TableBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"` // 同步过来的区块
}

func (x *ResTableBlocks) Reset() {
	*x = ResTableBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTableBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTableBlocks) ProtoMessage() {}

func (x *ResTableBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTableBlocks.ProtoReflect.Descriptor instead.
func (*ResTableBlocks) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *ResTableBlocks) GetBlocks() []*TableBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// 验证信息
type VerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //状态
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`      // 验证信息
}

func (x *VerifyInfo) Reset() {
	*x = VerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyInfo) ProtoMessage() {}

func (x *VerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyInfo.ProtoReflect.Descriptor instead.
func (*VerifyInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyInfo) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *VerifyInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalIp   string `protobuf:"bytes,1,opt,name=LocalIp,proto3" json:"LocalIp,omitempty"`     // ip号
	LocalPort string `protobuf:"bytes,2,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"` // 端口号
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *NodeInfo) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *NodeInfo) GetLocalPort() string {
	if x != nil {
		return x.LocalPort
	}
	return ""
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *Nodes) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAccountant bool   `protobuf:"varint,1,opt,name=IsAccountant,proto3" json:"IsAccountant,omitempty"` // 是否拥有记账权
	LocalIp      string `protobuf:"bytes,2,opt,name=localIp,proto3" json:"localIp,omitempty"`            //节点的IP
	LocalPort    int32  `protobuf:"varint,3,opt,name=localPort,proto3" json:"localPort,omitempty"`       // 节点的端口号
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{13}
}

func (x *Heartbeat) GetIsAccountant() bool {
	if x != nil {
		return x.IsAccountant
	}
	return false
}

func (x *Heartbeat) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *Heartbeat) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

type TableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 表的名字
}

func (x *TableName) Reset() {
	*x = TableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableName) ProtoMessage() {}

func (x *TableName) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableName.ProtoReflect.Descriptor instead.
func (*TableName) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{14}
}

func (x *TableName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 加入集群提交的请求信息
type ReqJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalIp   string `protobuf:"bytes,1,opt,name=localIp,proto3" json:"localIp,omitempty"`     // ip
	LocalPort string `protobuf:"bytes,2,opt,name=localPort,proto3" json:"localPort,omitempty"` // 端口号
	JoinKey   []byte `protobuf:"bytes,3,opt,name=JoinKey,proto3" json:"JoinKey,omitempty"`     // 加入集群的密钥
}

func (x *ReqJoin) Reset() {
	*x = ReqJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqJoin) ProtoMessage() {}

func (x *ReqJoin) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqJoin.ProtoReflect.Descriptor instead.
func (*ReqJoin) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{15}
}

func (x *ReqJoin) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *ReqJoin) GetLocalPort() string {
	if x != nil {
		return x.LocalPort
	}
	return ""
}

func (x *ReqJoin) GetJoinKey() []byte {
	if x != nil {
		return x.JoinKey
	}
	return nil
}

// 类型和数据
type TypAndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ  int32  `protobuf:"varint,1,opt,name=Typ,proto3" json:"Typ,omitempty"`  // 类型
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"` // 数据
}

func (x *TypAndData) Reset() {
	*x = TypAndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypAndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypAndData) ProtoMessage() {}

func (x *TypAndData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypAndData.ProtoReflect.Descriptor instead.
func (*TypAndData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{16}
}

func (x *TypAndData) GetTyp() int32 {
	if x != nil {
		return x.Typ
	}
	return 0
}

func (x *TypAndData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 处理结果
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //状态
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`      //信息
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{17}
}

func (x *Info) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Info) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x22, 0xf3,
	0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x59, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x4b, 0x65, 0x6c, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x4b, 0x65, 0x6c, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6d, 0x70, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x4b, 0x65, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x4b, 0x65, 0x6c, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x38, 0x0a, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x61, 0x6d, 0x70, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x38,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x42, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x37, 0x0a, 0x05,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x1f,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x32, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x79,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x32, 0xe1, 0x05, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x1a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x19, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x1a, 0x1e, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x4a,
	0x6f, 0x69, 0x6e, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x11, 0x50, 0x01, 0x5a, 0x0d, 0x2e, 0x2f,
	0x3b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_server_proto_goTypes = []interface{}{
	(*DataTransaction)(nil),   // 0: blockChainGrpc.DataTransaction
	(*TableTransaction)(nil),  // 1: blockChainGrpc.TableTransaction
	(*DataTransactions)(nil),  // 2: blockChainGrpc.DataTransactions
	(*TableTransactions)(nil), // 3: blockChainGrpc.TableTransactions
	(*DataBlock)(nil),         // 4: blockChainGrpc.DataBlock
	(*TableBlock)(nil),        // 5: blockChainGrpc.TableBlock
	(*ReqDataBlock)(nil),      // 6: blockChainGrpc.ReqDataBlock
	(*ResDataBlocks)(nil),     // 7: blockChainGrpc.ResDataBlocks
	(*ReqTableBlock)(nil),     // 8: blockChainGrpc.ReqTableBlock
	(*ResTableBlocks)(nil),    // 9: blockChainGrpc.ResTableBlocks
	(*VerifyInfo)(nil),        // 10: blockChainGrpc.VerifyInfo
	(*NodeInfo)(nil),          // 11: blockChainGrpc.NodeInfo
	(*Nodes)(nil),             // 12: blockChainGrpc.Nodes
	(*Heartbeat)(nil),         // 13: blockChainGrpc.Heartbeat
	(*TableName)(nil),         // 14: blockChainGrpc.TableName
	(*ReqJoin)(nil),           // 15: blockChainGrpc.ReqJoin
	(*TypAndData)(nil),        // 16: blockChainGrpc.TypAndData
	(*Info)(nil),              // 17: blockChainGrpc.Info
}
var file_server_proto_depIdxs = []int32{
	0,  // 0: blockChainGrpc.DataTransactions.Transactions:type_name -> blockChainGrpc.DataTransaction
	1,  // 1: blockChainGrpc.TableTransactions.Transactions:type_name -> blockChainGrpc.TableTransaction
	0,  // 2: blockChainGrpc.DataBlock.TxInfo:type_name -> blockChainGrpc.DataTransaction
	1,  // 3: blockChainGrpc.TableBlock.TxInfo:type_name -> blockChainGrpc.TableTransaction
	4,  // 4: blockChainGrpc.ResDataBlocks.blocks:type_name -> blockChainGrpc.DataBlock
	5,  // 5: blockChainGrpc.ResTableBlocks.blocks:type_name -> blockChainGrpc.TableBlock
	11, // 6: blockChainGrpc.Nodes.nodes:type_name -> blockChainGrpc.NodeInfo
	4,  // 7: blockChainGrpc.BlockChainService.DistributeDataBlock:input_type -> blockChainGrpc.DataBlock
	6,  // 8: blockChainGrpc.BlockChainService.DataBlockSynchronization:input_type -> blockChainGrpc.ReqDataBlock
	5,  // 9: blockChainGrpc.BlockChainService.DistributeTableBlock:input_type -> blockChainGrpc.TableBlock
	8,  // 10: blockChainGrpc.BlockChainService.TableBlockSynchronization:input_type -> blockChainGrpc.ReqTableBlock
	0,  // 11: blockChainGrpc.BlockChainService.DataTradingPool:input_type -> blockChainGrpc.DataTransaction
	1,  // 12: blockChainGrpc.BlockChainService.TableTradingPool:input_type -> blockChainGrpc.TableTransaction
	15, // 13: blockChainGrpc.BlockChainService.JoinCluster:input_type -> blockChainGrpc.ReqJoin
	11, // 14: blockChainGrpc.BlockChainService.BroadcastNode:input_type -> blockChainGrpc.NodeInfo
	16, // 15: blockChainGrpc.BlockChainService.Handle:input_type -> blockChainGrpc.TypAndData
	10, // 16: blockChainGrpc.BlockChainService.DistributeDataBlock:output_type -> blockChainGrpc.VerifyInfo
	7,  // 17: blockChainGrpc.BlockChainService.DataBlockSynchronization:output_type -> blockChainGrpc.ResDataBlocks
	10, // 18: blockChainGrpc.BlockChainService.DistributeTableBlock:output_type -> blockChainGrpc.VerifyInfo
	9,  // 19: blockChainGrpc.BlockChainService.TableBlockSynchronization:output_type -> blockChainGrpc.ResTableBlocks
	10, // 20: blockChainGrpc.BlockChainService.DataTradingPool:output_type -> blockChainGrpc.VerifyInfo
	10, // 21: blockChainGrpc.BlockChainService.TableTradingPool:output_type -> blockChainGrpc.VerifyInfo
	10, // 22: blockChainGrpc.BlockChainService.JoinCluster:output_type -> blockChainGrpc.VerifyInfo
	10, // 23: blockChainGrpc.BlockChainService.BroadcastNode:output_type -> blockChainGrpc.VerifyInfo
	17, // 24: blockChainGrpc.BlockChainService.Handle:output_type -> blockChainGrpc.Info
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResDataBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTableBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTableBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypAndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockChainServiceClient is the client API for BlockChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainServiceClient interface {
	// 数据区块的分发
	DistributeDataBlock(ctx context.Context, in *DataBlock, opts ...grpc.CallOption) (*VerifyInfo, error)
	// 数据区块的同步
	DataBlockSynchronization(ctx context.Context, in *ReqDataBlock, opts ...grpc.CallOption) (*ResDataBlocks, error)
	// 表区块的分发
	DistributeTableBlock(ctx context.Context, in *TableBlock, opts ...grpc.CallOption) (*VerifyInfo, error)
	// 表区块的同步
	TableBlockSynchronization(ctx context.Context, in *ReqTableBlock, opts ...grpc.CallOption) (*ResTableBlocks, error)
	// 数据交易池
	DataTradingPool(ctx context.Context, in *DataTransaction, opts ...grpc.CallOption) (*VerifyInfo, error)
	// 表交易池
	TableTradingPool(ctx context.Context, in *TableTransaction, opts ...grpc.CallOption) (*VerifyInfo, error)
	// 加入集群
	JoinCluster(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (*VerifyInfo, error)
	// 向集群中其他节点发送本节点的信息
	BroadcastNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*VerifyInfo, error)
	Handle(ctx context.Context, in *TypAndData, opts ...grpc.CallOption) (*Info, error)
}

type blockChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainServiceClient(cc grpc.ClientConnInterface) BlockChainServiceClient {
	return &blockChainServiceClient{cc}
}

func (c *blockChainServiceClient) DistributeDataBlock(ctx context.Context, in *DataBlock, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/DistributeDataBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) DataBlockSynchronization(ctx context.Context, in *ReqDataBlock, opts ...grpc.CallOption) (*ResDataBlocks, error) {
	out := new(ResDataBlocks)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/DataBlockSynchronization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) DistributeTableBlock(ctx context.Context, in *TableBlock, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/DistributeTableBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) TableBlockSynchronization(ctx context.Context, in *ReqTableBlock, opts ...grpc.CallOption) (*ResTableBlocks, error) {
	out := new(ResTableBlocks)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/TableBlockSynchronization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) DataTradingPool(ctx context.Context, in *DataTransaction, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/DataTradingPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) TableTradingPool(ctx context.Context, in *TableTransaction, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/TableTradingPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) JoinCluster(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) BroadcastNode(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/BroadcastNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) Handle(ctx context.Context, in *TypAndData, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/blockChainGrpc.BlockChainService/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServiceServer is the server API for BlockChainService service.
type BlockChainServiceServer interface {
	// 数据区块的分发
	DistributeDataBlock(context.Context, *DataBlock) (*VerifyInfo, error)
	// 数据区块的同步
	DataBlockSynchronization(context.Context, *ReqDataBlock) (*ResDataBlocks, error)
	// 表区块的分发
	DistributeTableBlock(context.Context, *TableBlock) (*VerifyInfo, error)
	// 表区块的同步
	TableBlockSynchronization(context.Context, *ReqTableBlock) (*ResTableBlocks, error)
	// 数据交易池
	DataTradingPool(context.Context, *DataTransaction) (*VerifyInfo, error)
	// 表交易池
	TableTradingPool(context.Context, *TableTransaction) (*VerifyInfo, error)
	// 加入集群
	JoinCluster(context.Context, *ReqJoin) (*VerifyInfo, error)
	// 向集群中其他节点发送本节点的信息
	BroadcastNode(context.Context, *NodeInfo) (*VerifyInfo, error)
	Handle(context.Context, *TypAndData) (*Info, error)
}

// UnimplementedBlockChainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlockChainServiceServer struct {
}

func (*UnimplementedBlockChainServiceServer) DistributeDataBlock(context.Context, *DataBlock) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeDataBlock not implemented")
}
func (*UnimplementedBlockChainServiceServer) DataBlockSynchronization(context.Context, *ReqDataBlock) (*ResDataBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataBlockSynchronization not implemented")
}
func (*UnimplementedBlockChainServiceServer) DistributeTableBlock(context.Context, *TableBlock) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeTableBlock not implemented")
}
func (*UnimplementedBlockChainServiceServer) TableBlockSynchronization(context.Context, *ReqTableBlock) (*ResTableBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableBlockSynchronization not implemented")
}
func (*UnimplementedBlockChainServiceServer) DataTradingPool(context.Context, *DataTransaction) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataTradingPool not implemented")
}
func (*UnimplementedBlockChainServiceServer) TableTradingPool(context.Context, *TableTransaction) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableTradingPool not implemented")
}
func (*UnimplementedBlockChainServiceServer) JoinCluster(context.Context, *ReqJoin) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (*UnimplementedBlockChainServiceServer) BroadcastNode(context.Context, *NodeInfo) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNode not implemented")
}
func (*UnimplementedBlockChainServiceServer) Handle(context.Context, *TypAndData) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}

func RegisterBlockChainServiceServer(s *grpc.Server, srv BlockChainServiceServer) {
	s.RegisterService(&_BlockChainService_serviceDesc, srv)
}

func _BlockChainService_DistributeDataBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).DistributeDataBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/DistributeDataBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).DistributeDataBlock(ctx, req.(*DataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_DataBlockSynchronization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).DataBlockSynchronization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/DataBlockSynchronization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).DataBlockSynchronization(ctx, req.(*ReqDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_DistributeTableBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).DistributeTableBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/DistributeTableBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).DistributeTableBlock(ctx, req.(*TableBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_TableBlockSynchronization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTableBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).TableBlockSynchronization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/TableBlockSynchronization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).TableBlockSynchronization(ctx, req.(*ReqTableBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_DataTradingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).DataTradingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/DataTradingPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).DataTradingPool(ctx, req.(*DataTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_TableTradingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).TableTradingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/TableTradingPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).TableTradingPool(ctx, req.(*TableTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).JoinCluster(ctx, req.(*ReqJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_BroadcastNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).BroadcastNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/BroadcastNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).BroadcastNode(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypAndData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockChainGrpc.BlockChainService/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).Handle(ctx, req.(*TypAndData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockChainGrpc.BlockChainService",
	HandlerType: (*BlockChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeDataBlock",
			Handler:    _BlockChainService_DistributeDataBlock_Handler,
		},
		{
			MethodName: "DataBlockSynchronization",
			Handler:    _BlockChainService_DataBlockSynchronization_Handler,
		},
		{
			MethodName: "DistributeTableBlock",
			Handler:    _BlockChainService_DistributeTableBlock_Handler,
		},
		{
			MethodName: "TableBlockSynchronization",
			Handler:    _BlockChainService_TableBlockSynchronization_Handler,
		},
		{
			MethodName: "DataTradingPool",
			Handler:    _BlockChainService_DataTradingPool_Handler,
		},
		{
			MethodName: "TableTradingPool",
			Handler:    _BlockChainService_TableTradingPool_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _BlockChainService_JoinCluster_Handler,
		},
		{
			MethodName: "BroadcastNode",
			Handler:    _BlockChainService_BroadcastNode_Handler,
		},
		{
			MethodName: "Handle",
			Handler:    _BlockChainService_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
